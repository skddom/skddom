<?php

/**
 * Работа с robots.txt 
 * (разнообразная ненадёжная текстовая магия вместо нормального парсера)
 */
class nc_search_robots {

    protected $start_text = "Auto-generated section. Do not change.";
    protected $end_text = "End of auto-generated section.";
    protected $start_regexp;
    protected $end_regexp;
    protected $section_regexp;
    protected $robots_txt = array();
    protected $robots_txt_changes = array();

    /**
     * 
     */
    public function __construct() {
        $this->start_regexp = "# " . preg_quote($this->start_text, '/') . '[^\r\n]*';
        $this->end_regexp = "# " . preg_quote($this->end_text, '/');
        $this->section_regexp = "/" .
            $this->start_regexp  . '\r?\n' .
            '(.*)' .
            $this->end_regexp .
            '\s*/s';
    }

    /**
     * @param $site_id
     * @return mixed
     * @throws Exception
     */
    public function get_robots_txt($site_id) {
        if (!isset($this->robots_txt[$site_id])) {
            $this->robots_txt[$site_id] = nc_Core::get_object()->catalogue->get_by_id($site_id, 'Robots');
        }
        return $this->robots_txt[$site_id];
    }

    /**
     * @param $site_id
     * @param $robots_txt
     */
    public function set_robots_txt($site_id, $robots_txt) {
        $this->robots_txt[$site_id] = $robots_txt;
        $this->robots_txt_changes[$site_id] = true;
    }

    /**
     * @param $site_id
     */
    public function save_robots_txt($site_id) {
        if (!$this->robots_txt_changes[$site_id]) {
            return;
        }
        $robots_txt = trim($this->robots_txt[$site_id]) . "\n";
        $db = nc_Core::get_object()->db;
        $db->query("UPDATE `Catalogue` 
                       SET `Robots` = '" . $db->escape($robots_txt) . "'
                     WHERE `Catalogue_ID` = " . (int)$site_id);
    }

    /**
     * @param $site_id
     * @param null $which_directive
     * @return array|mixed
     */
    public function get_directives($site_id, $which_directive = null) {
        $robots_txt = preg_split("/\r?\n/", $this->get_robots_txt($site_id));

        $directives = array(
            'allow' => array(),
            'disallow' => array(),
            'crawl-delay' => null,
        );

        $ignore = true;
        $robot_names = array("*", nc_search::get_setting('CrawlerUserAgent'));
        $line_regexp = "/^\s*(?:(?P<directive>[\w-]+)\s*:\s*(?P<value>[^#]+))?(?P<comment>\s*#.+)?$/";

        foreach ($robots_txt as $line) {
            if (!nc_preg_match($line_regexp, $line, $parts) || !isset($parts['directive'])) {
                continue; // go to next line
            }

            $directive = strtolower($parts["directive"]);
            $value = trim($parts["value"]);
            //$comment = isset($parts["comment"]) ? $parts["comment"] : "";

            if (!$ignore) {
                if ($directive == 'allow' || $directive == 'disallow') {
                    $directives[$directive][] = $value ? $value : '/';
                }
                else if ($directive != 'user-agent') {
                    $directives[$directive] = $value;
                }
            }

            if ($directive == 'user-agent') {
                $ignore = !in_array($value, $robot_names);
            }
        }

        return ($which_directive ? $directives[$which_directive] : $directives);
    }

    /**
     * @param $site_id
     * @param $directives
     */
    protected function add_autogenerated_section($site_id, $directives) {
        $robots_txt = $this->get_robots_txt($site_id);
        $header = "# $this->start_text " . CONTROL_CONTENT_CATALOUGE_FUNCS_CATALOGUEFORM_ROBOTS_DONT_CHANGE;
        $footer = "# $this->end_text";

        // Если нет User-agent: *, добавляем в конец файла
        if (!preg_match('/^User-agent:\s*\*\s*$/im', $robots_txt)) {
            $robots_txt = rtrim($robots_txt) . "\n\nUser-agent: *\n";
        }

        // Ищем раздел User-agent: *, добавляем после него блок "# Auto-generated section ..."
        $sections = preg_split('/^((?:User-agent|Sitemap):.+[\r\n]+)/im', $robots_txt, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);

        $offset = 0;
        foreach ($sections as $i => $section) {
            $offset = $i + 1;
            if (preg_match('/^User-agent:\s*\*\s*$/im', $section)) {
                // Может быть несколько директив User-agent, они все относятся к этому разделу
                while (isset($sections[$offset]) && preg_match('/^User-agent/i', $sections[$offset])) {
                    $offset++;
                }
                // Добавим наш блок внизу заданных пользователем директив
                if (isset($sections[$offset + 1])) {
                    $offset++;
                }

                break;
            }
        }
        $autogenerated_section = "\n\n$header\n$directives\n$footer\n\n";

        // У предыдущего блока убираем концы строк
        $sections[$offset] = trim($sections[$offset]);

        // Вставляем наш блок
        array_splice($sections, $offset + 1, 0, $autogenerated_section);
        $new_robots_txt = join('', $sections);

        $this->set_robots_txt($site_id, $new_robots_txt);
    }

    /**
     * @param $site_id
     * @param $directive
     * @param bool $at_top
     */
    public function add_directive($site_id, $directive, $at_top = true) {
        // Wikipedia: "In order to be compatible to all robots, if one wants to allow 
        // single files inside an otherwise disallowed directory, it is necessary to 
        // place the Allow directive(s) first, followed by the Disallow".

        $robots_txt = $this->get_robots_txt($site_id);

        // add section if it's not there yet
        if (!nc_preg_match($this->section_regexp, $robots_txt, $matches)) {
            $this->add_autogenerated_section($site_id, $directive);
            return;
        }

        $section_text = $matches[0];

        // do nothing if the directive is already there:
        if (nc_preg_match('/^' . preg_quote($directive, '/') . '\s*\n/m', $section_text)) {
            return;
        }

        // add to the top
        if ($at_top) {
            $new_section_text = nc_preg_replace("/($this->start_regexp\r?\n)/", "$1$directive\n", $section_text);
        }
        // add to the bottom
        else {
            $new_section_text = nc_preg_replace("/($this->end_regexp)/", "$directive\n$1", $section_text);
        }

        $new_robots_txt = str_replace($section_text, $new_section_text, $robots_txt);
        $this->set_robots_txt($site_id, $new_robots_txt);
    }

    /**
     * @param $site_id
     * @param $directive_regexp
     */
    public function remove_directive($site_id, $directive_regexp) {
        $robots_txt = $this->get_robots_txt($site_id);

        if (!nc_preg_match($this->section_regexp, $robots_txt, $matches)) {
            return;
        }

        $section_text = $matches[0];
        $new_section_text = nc_preg_replace($directive_regexp, "", $section_text);

        if ($new_section_text == $section_text) { // $count почему-то не работает, хз
            return;
        }

        // remove empty section
        if (nc_preg_match("/$this->start_regexp\s+$this->end_regexp/i", $new_section_text)) {
            $new_section_text = "";
        }

        $new_robots_txt = str_replace($section_text, $new_section_text, $robots_txt);
        $this->set_robots_txt($site_id, $new_robots_txt);
    }

    // ---------------------------------------------------------------------------
    // EVENT LISTENERS
    // ---------------------------------------------------------------------------
    /**
     * event listener for addCatalogue, updateCatalogue
     * @param $site_ids
     * @throws Exception
     */
    public function update_site($site_ids) {
        foreach ((array)$site_ids as $site_id) {
            $disallow_indexing = nc_Core::get_object()->catalogue->get_by_id($site_id, 'DisallowIndexing');
            if ($disallow_indexing == 1) {
                $this->add_directive($site_id, "Disallow: /", false);
            }
            else {
                $this->remove_directive($site_id, "!Disallow: /\s*\n!u");
            }
            $this->save_robots_txt($site_id);
        }
    }

    /**
     * event listener for addSubdivision, updateSubdivision
     * @param $site_id
     * @param $sub_ids
     * @throws Exception
     */
    public function update_sub($site_id, $sub_ids) {
        // $sub_id can be array
        $sub_ids = (array)$sub_ids;
        // remove old entries
        $this->delete_sub($site_id, $sub_ids);

        $nc_core = nc_Core::get_object();
        foreach ($sub_ids as $sub_id) {
            $sub_params = $nc_core->db->get_row(
                "SELECT `DisallowIndexing`, `ExternalURL`
                   FROM `Subdivision`
                  WHERE `Subdivision_ID` = " . (int)$sub_id,
                ARRAY_A);

            $has_external_url = $sub_params['ExternalURL'] && (
                    strpos($sub_params['ExternalURL'], '//') !== false ||
                    preg_match('/^\w+:/', $sub_params['ExternalURL'])
                );

            if (!$sub_params || $sub_params['DisallowIndexing'] == -1 || $has_external_url) {
                continue;
            }

            $path = nc_folder_path($sub_id, null, null, false);
            $path = nc_search_util::encode_path($path); // encode non-latin symbols
            if ($sub_params['DisallowIndexing'] == 1) {
                $this->add_directive($site_id, "Disallow: $path #$sub_id#", false);
            }
            elseif ($sub_params['DisallowIndexing'] == 0) {
                $this->add_directive($site_id, "Allow: $path #$sub_id#");
            }
        }
        $this->save_robots_txt($site_id);
    }

    /**
     * event listener for dropSubdivision
     * @param $site_id
     * @param $sub_ids
     */
    public function delete_sub($site_id, $sub_ids) {
        // $sub_ids can be array
        $sub_ids = (array)$sub_ids;
        foreach ($sub_ids as $sub_id) {
            $this->remove_directive($site_id, "!(?:Dis)?[Aa]llow:.+?#$sub_id#\s*\n!u");
        }
        $this->save_robots_txt($site_id);
    }

    /**
     * @param $site_id
     * @param string $robots_txt
     * @return mixed|null
     */
    public function fill_autogenerated_section($site_id, $robots_txt = '') {
        $site_id = (int)$site_id;
        if (!$site_id) {
            return null;
        }

        if ($robots_txt) {
            $this->set_robots_txt($site_id, $robots_txt);
        }

        $this->update_site($site_id);

        $sub_ids = nc_core('db')->get_col("SELECT `Subdivision_ID`
                                             FROM `Subdivision`
                                            WHERE `DisallowIndexing` >= 0 
                                              AND `Catalogue_ID` = " . $site_id);

        $this->update_sub($site_id, $sub_ids);

        return $this->get_robots_txt($site_id);
    }

    /**
     * @param $site_id
     * @return boolean
     */
    public function remove_autogenerated_section($site_id) {
        $old_robots = $this->get_robots_txt($site_id);
        $new_robots = preg_replace($this->section_regexp, '', $old_robots);

        if ($new_robots != $old_robots) {
            $this->set_robots_txt($site_id, $new_robots);
            $this->save_robots_txt($site_id);
            return true;
        }
        else {
            return false;
        }
    }
}
